{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Najan\\\\Desktop\\\\TopTracks\\\\SpTopify\\\\toptracks\\\\src\\\\components\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport useAuth from \"./useAuth\";\nimport { useState, useEffect } from \"react\";\nimport { Container, Form } from \"react-bootstrap\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport ArtistSearchResult from \"./ArtistSearchResult\";\nimport Player from \"./Player\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  client_id: \"9065c82d679c48b09c2df99999c34034\"\n});\nconst [playlistResults, setPlaylistResults] = useState([]);\n\nfunction getPlaylists() {\n  if (!playlistResults) return;\n  spotifyApi.getUserPlaylists().then(res => {\n    setPlaylistResults(res.body.items.map(playlist => {\n      return {\n        name: playlist.name,\n        image: playlist.images[2]\n      };\n    }));\n  });\n}\n\nexport default function Dashboard({\n  code\n}) {\n  _s();\n\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [albumResults, setAlbumResults] = useState([]);\n  const [trackResults, setTrackResults] = useState([]);\n  const [playingTrack, setPlayingTrack] = useState([]); // const playlists = getPlaylists();\n  //Handle playlist retrieval\n  //getPlaylists();\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearch(\"\");\n  } //Handling artist top tracks\n\n\n  function getArtistTracks(artistName) {\n    setSearch(\"\");\n    spotifyApi.searchTracks(\"artist:\" + artistName, {\n      limit: 50\n    }).then(res => {\n      var songCount = 0;\n      setTrackResults(res.body.tracks.items.map(track => {\n        songCount = songCount + 1;\n        var trackImage = \"\";\n        console.log(track);\n\n        try {\n          trackImage = track.album.images[2].url;\n        } catch (err) {\n          console.log(err.message);\n        }\n\n        return {\n          name: track.name,\n          uri: track.uri,\n          art: trackImage,\n          albumName: track.album.name,\n          release: track.album.release_date,\n          explicit: track.explicit,\n          rank: songCount\n        };\n      }));\n    });\n  } //Set access token\n\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]); //Artist Search\n\n  useEffect(() => {\n    setTrackResults([]);\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n\n    (async () => {\n      let res = await spotifyApi.searchArtists(search); //console.log(res.body);\n\n      setSearchResults(res.body.artists.items.map(artist => {\n        console.log(artist);\n        var artistImage = \"\";\n\n        try {\n          artistImage = artist.images[0].url;\n        } catch (err) {\n          console.log(\"No image\");\n        } //console.log(artist);\n\n\n        return {\n          name: artist.name,\n          id: artist.id,\n          artistUrl: artistImage\n        };\n      }));\n    })();\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", /*#__PURE__*/_jsxDEV(Container, {\n      className: \"d-flex flex-column py-2\",\n      style: {\n        height: \"100vh\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"search\",\n        placeholder: \"Search Artists\",\n        value: search,\n        onChange: e => setSearch(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-grow-1 my-2\",\n        style: {\n          overflowY: \"auto\"\n        },\n        children: [searchResults.map(artist => /*#__PURE__*/_jsxDEV(ArtistSearchResult, {\n          artist: artist,\n          getArtistTracks: getArtistTracks\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)), trackResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n          class: \"tracks\",\n          track: track,\n          chooseTrack: chooseTrack,\n          getPlaylists: getPlaylists,\n          spotifyApi: spotifyApi\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Player, {\n          accessToken: accessToken,\n          trackUri: playingTrack === null || playingTrack === void 0 ? void 0 : playingTrack.uri\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"fOyS+Amxmw1H0CdDT3cUy4AG/Tg=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/Najan/Desktop/TopTracks/SpTopify/toptracks/src/components/Dashboard.js"],"names":["React","useAuth","useState","useEffect","Container","Form","SpotifyWebApi","TrackSearchResult","ArtistSearchResult","Player","spotifyApi","client_id","playlistResults","setPlaylistResults","getPlaylists","getUserPlaylists","then","res","body","items","map","playlist","name","image","images","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","albumResults","setAlbumResults","trackResults","setTrackResults","playingTrack","setPlayingTrack","chooseTrack","track","getArtistTracks","artistName","searchTracks","limit","songCount","tracks","trackImage","console","log","album","url","err","message","uri","art","albumName","release","release_date","explicit","rank","setAccessToken","cancel","searchArtists","artists","artist","artistImage","id","artistUrl","height","e","target","value","overflowY"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport useAuth from \"./useAuth\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport TrackSearchResult from \"./TrackSearchResult\";\r\nimport ArtistSearchResult from \"./ArtistSearchResult\";\r\nimport Player from \"./Player\";\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n  client_id: \"9065c82d679c48b09c2df99999c34034\",\r\n});\r\n\r\nconst [playlistResults, setPlaylistResults] = useState([]);\r\nfunction getPlaylists() {\r\n  if (!playlistResults) return;\r\n  spotifyApi.getUserPlaylists().then((res) => {\r\n    setPlaylistResults(\r\n      res.body.items.map((playlist) => {\r\n        return {\r\n          name: playlist.name,\r\n          image: playlist.images[2],\r\n        };\r\n      })\r\n    );\r\n  });\r\n}\r\n\r\nexport default function Dashboard({ code }) {\r\n  const accessToken = useAuth(code);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [albumResults, setAlbumResults] = useState([]);\r\n  const [trackResults, setTrackResults] = useState([]);\r\n\r\n  const [playingTrack, setPlayingTrack] = useState([]);\r\n  // const playlists = getPlaylists();\r\n  //Handle playlist retrieval\r\n\r\n  //getPlaylists();\r\n  function chooseTrack(track) {\r\n    setPlayingTrack(track);\r\n    setSearch(\"\");\r\n  }\r\n\r\n  //Handling artist top tracks\r\n  function getArtistTracks(artistName) {\r\n    setSearch(\"\");\r\n    spotifyApi\r\n      .searchTracks(\"artist:\" + artistName, { limit: 50 })\r\n      .then((res) => {\r\n        var songCount = 0;\r\n        setTrackResults(\r\n          res.body.tracks.items.map((track) => {\r\n            songCount = songCount + 1;\r\n            var trackImage = \"\";\r\n            console.log(track);\r\n            try {\r\n              trackImage = track.album.images[2].url;\r\n            } catch (err) {\r\n              console.log(err.message);\r\n            }\r\n            return {\r\n              name: track.name,\r\n              uri: track.uri,\r\n              art: trackImage,\r\n              albumName: track.album.name,\r\n              release: track.album.release_date,\r\n              explicit: track.explicit,\r\n              rank: songCount,\r\n            };\r\n          })\r\n        );\r\n      });\r\n  }\r\n\r\n  //Set access token\r\n  useEffect(() => {\r\n    if (!accessToken) return;\r\n    spotifyApi.setAccessToken(accessToken);\r\n  }, [accessToken]);\r\n\r\n  //Artist Search\r\n  useEffect(() => {\r\n    setTrackResults([]);\r\n    if (!search) return setSearchResults([]);\r\n    if (!accessToken) return;\r\n\r\n    let cancel = false;\r\n    (async () => {\r\n      let res = await spotifyApi.searchArtists(search);\r\n      //console.log(res.body);\r\n      setSearchResults(\r\n        res.body.artists.items.map((artist) => {\r\n          console.log(artist);\r\n\r\n          var artistImage = \"\";\r\n          try {\r\n            artistImage = artist.images[0].url;\r\n          } catch (err) {\r\n            console.log(\"No image\");\r\n          }\r\n          //console.log(artist);\r\n          return {\r\n            name: artist.name,\r\n            id: artist.id,\r\n            artistUrl: artistImage,\r\n          };\r\n        })\r\n      );\r\n    })();\r\n  }, [search, accessToken]);\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      <Container\r\n        className=\"d-flex flex-column py-2\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <Form.Control\r\n          type=\"search\"\r\n          placeholder=\"Search Artists\"\r\n          value={search}\r\n          onChange={(e) => setSearch(e.target.value)}\r\n        ></Form.Control>\r\n        <div className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\r\n          {searchResults.map((artist) => (\r\n            <ArtistSearchResult\r\n              artist={artist}\r\n              getArtistTracks={getArtistTracks}\r\n            />\r\n          ))}\r\n          {trackResults.map((track) => (\r\n            <TrackSearchResult\r\n              class=\"tracks\"\r\n              track={track}\r\n              chooseTrack={chooseTrack}\r\n              getPlaylists={getPlaylists}\r\n              spotifyApi={spotifyApi}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div>\r\n          <Player\r\n            accessToken={accessToken}\r\n            trackUri={playingTrack?.uri}\r\n          ></Player>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}