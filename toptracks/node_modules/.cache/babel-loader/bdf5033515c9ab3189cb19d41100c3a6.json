{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Najan\\\\Desktop\\\\TopTracks\\\\SpTopify\\\\toptracks\\\\src\\\\components\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport useAuth from \"./useAuth\";\nimport { useState, useEffect } from \"react\";\nimport { Container, Form } from \"react-bootstrap\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport ArtistSearchResult from \"./ArtistSearchResult\";\nimport Player from \"./Player\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  client_id: \"9065c82d679c48b09c2df99999c34034\"\n});\nexport default function Dashboard({\n  code\n}) {\n  _s();\n\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [trackResults, setTrackResults] = useState([]);\n  const [playlistResults, setPlaylistResults] = useState([]);\n  const [playingTrack, setPlayingTrack] = useState([]);\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearch(\"\");\n  } //Add song to playlist\n\n\n  function addToPlaylist(track, playlist) {\n    spotifyApi.addTracksToPlaylist(playlist.id, [track.uri]).then(function () {\n      console.log(\"Added tracks to playlist!\");\n    }, function (err) {\n      console.log(\"Something went wrong!\", err);\n    });\n  } //Fetches user playlist Data\n\n\n  function getPlaylists() {\n    spotifyApi.getUserPlaylists().then(res => {\n      setPlaylistResults(res.body.items.map(playlist => {\n        let playlistImage = \"\";\n\n        try {\n          playlistImage = playlist.images[0].url;\n        } catch (err) {\n          console.log(err.message);\n        }\n\n        return {\n          name: playlist.name,\n          img: playlistImage,\n          id: playlist.id\n        };\n      }));\n    });\n  } //Handling artist top tracks\n\n\n  function getArtistTracks(artistName) {\n    setSearch(\"\"); // getPlaylists();\n\n    spotifyApi.searchTracks(\"artist:\" + artistName, {\n      limit: 50\n    }).then(res => {\n      let songCount = 0;\n      setTrackResults(res.body.tracks.items.map(track => {\n        songCount = songCount + 1;\n        let trackImage = \"\";\n\n        try {\n          trackImage = track.album.images[2].url;\n        } catch (err) {\n          console.log(err.message);\n        }\n\n        return {\n          name: track.name,\n          uri: track.uri,\n          art: trackImage,\n          albumName: track.album.name,\n          release: track.album.release_date,\n          explicit: track.explicit,\n          rank: songCount\n        };\n      }));\n    });\n  } //Set access token, only on accessToken change\n\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n    getPlaylists();\n    console.log(\"This is bad lol\");\n  }, [accessToken]); //Artist Search, only on search or accessToken change\n\n  useEffect(() => {\n    setTrackResults([]);\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    spotifyApi.searchArtists(search).then(res => {\n      setSearchResults(res.body.artists.items.map(artist => {\n        let artistImage = \"\";\n\n        try {\n          artistImage = artist.images[0].url;\n        } catch (err) {\n          console.log(\"No image\");\n        }\n\n        return {\n          name: artist.name,\n          artistImage: artistImage\n        };\n      }));\n    });\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"d-flex flex-column py-2\",\n      style: {\n        height: \"100vh\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"search\",\n        placeholder: \"Search Artists\",\n        value: search,\n        onChange: e => setSearch(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-grow-1 my-2\",\n        style: {\n          overflowY: \"auto\"\n        },\n        children: [searchResults.map(artist => /*#__PURE__*/_jsxDEV(ArtistSearchResult, {\n          artist: artist,\n          getArtistTracks: getArtistTracks\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this)), trackResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n          class: \"tracks\",\n          track: track,\n          chooseTrack: chooseTrack,\n          playlists: playlistResults,\n          addToPlaylist: addToPlaylist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Player, {\n          accessToken: accessToken,\n          trackUri: playingTrack === null || playingTrack === void 0 ? void 0 : playingTrack.uri\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"Uoh6sJkZfnh0+NQyWjs7KZnY4N4=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/Najan/Desktop/TopTracks/SpTopify/toptracks/src/components/Dashboard.js"],"names":["React","useAuth","useState","useEffect","Container","Form","SpotifyWebApi","TrackSearchResult","ArtistSearchResult","Player","spotifyApi","client_id","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","trackResults","setTrackResults","playlistResults","setPlaylistResults","playingTrack","setPlayingTrack","chooseTrack","track","addToPlaylist","playlist","addTracksToPlaylist","id","uri","then","console","log","err","getPlaylists","getUserPlaylists","res","body","items","map","playlistImage","images","url","message","name","img","getArtistTracks","artistName","searchTracks","limit","songCount","tracks","trackImage","album","art","albumName","release","release_date","explicit","rank","setAccessToken","searchArtists","artists","artist","artistImage","height","e","target","value","overflowY"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport useAuth from \"./useAuth\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport TrackSearchResult from \"./TrackSearchResult\";\r\nimport ArtistSearchResult from \"./ArtistSearchResult\";\r\nimport Player from \"./Player\";\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n  client_id: \"9065c82d679c48b09c2df99999c34034\",\r\n});\r\n\r\nexport default function Dashboard({ code }) {\r\n  const accessToken = useAuth(code);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [trackResults, setTrackResults] = useState([]);\r\n  const [playlistResults, setPlaylistResults] = useState([]);\r\n  const [playingTrack, setPlayingTrack] = useState([]);\r\n\r\n  function chooseTrack(track) {\r\n    setPlayingTrack(track);\r\n    setSearch(\"\");\r\n  }\r\n\r\n  //Add song to playlist\r\n  function addToPlaylist(track, playlist) {\r\n    spotifyApi.addTracksToPlaylist(playlist.id, [track.uri]).then(\r\n      function () {\r\n        console.log(\"Added tracks to playlist!\");\r\n      },\r\n      function (err) {\r\n        console.log(\"Something went wrong!\", err);\r\n      }\r\n    );\r\n  }\r\n\r\n  //Fetches user playlist Data\r\n  function getPlaylists() {\r\n    spotifyApi.getUserPlaylists().then((res) => {\r\n      setPlaylistResults(\r\n        res.body.items.map((playlist) => {\r\n          let playlistImage = \"\";\r\n          try {\r\n            playlistImage = playlist.images[0].url;\r\n          } catch (err) {\r\n            console.log(err.message);\r\n          }\r\n          return {\r\n            name: playlist.name,\r\n            img: playlistImage,\r\n            id: playlist.id,\r\n          };\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  //Handling artist top tracks\r\n  function getArtistTracks(artistName) {\r\n    setSearch(\"\");\r\n    // getPlaylists();\r\n    spotifyApi\r\n      .searchTracks(\"artist:\" + artistName, { limit: 50 })\r\n      .then((res) => {\r\n        let songCount = 0;\r\n        setTrackResults(\r\n          res.body.tracks.items.map((track) => {\r\n            songCount = songCount + 1;\r\n            let trackImage = \"\";\r\n            try {\r\n              trackImage = track.album.images[2].url;\r\n            } catch (err) {\r\n              console.log(err.message);\r\n            }\r\n            return {\r\n              name: track.name,\r\n              uri: track.uri,\r\n              art: trackImage,\r\n              albumName: track.album.name,\r\n              release: track.album.release_date,\r\n              explicit: track.explicit,\r\n              rank: songCount,\r\n            };\r\n          })\r\n        );\r\n      });\r\n  }\r\n\r\n  //Set access token, only on accessToken change\r\n  useEffect(() => {\r\n    if (!accessToken) return;\r\n    spotifyApi.setAccessToken(accessToken);\r\n    getPlaylists();\r\n    console.log(\"This is bad lol\");\r\n  }, [accessToken]);\r\n\r\n  //Artist Search, only on search or accessToken change\r\n  useEffect(() => {\r\n    setTrackResults([]);\r\n    if (!search) return setSearchResults([]);\r\n    if (!accessToken) return;\r\n    spotifyApi.searchArtists(search).then((res) => {\r\n      setSearchResults(\r\n        res.body.artists.items.map((artist) => {\r\n          let artistImage = \"\";\r\n          try {\r\n            artistImage = artist.images[0].url;\r\n          } catch (err) {\r\n            console.log(\"No image\");\r\n          }\r\n          return {\r\n            name: artist.name,\r\n            artistImage: artistImage,\r\n          };\r\n        })\r\n      );\r\n    });\r\n  }, [search, accessToken]);\r\n\r\n  return (\r\n    <div>\r\n      <Container\r\n        className=\"d-flex flex-column py-2\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <Form.Control\r\n          type=\"search\"\r\n          placeholder=\"Search Artists\"\r\n          value={search}\r\n          onChange={(e) => setSearch(e.target.value)}\r\n        ></Form.Control>\r\n        <div className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\r\n          {searchResults.map((artist) => (\r\n            <ArtistSearchResult\r\n              artist={artist}\r\n              getArtistTracks={getArtistTracks}\r\n            />\r\n          ))}\r\n          {trackResults.map((track) => (\r\n            <TrackSearchResult\r\n              class=\"tracks\"\r\n              track={track}\r\n              chooseTrack={chooseTrack}\r\n              playlists={playlistResults}\r\n              addToPlaylist={addToPlaylist}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div>\r\n          <Player\r\n            accessToken={accessToken}\r\n            trackUri={playingTrack?.uri}\r\n          ></Player>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}