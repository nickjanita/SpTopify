{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Najan\\\\Desktop\\\\TopTracks\\\\toptracks\\\\src\\\\components\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport useAuth from \"./useAuth\";\nimport { useState, useEffect } from \"react\";\nimport { Container, Form } from \"react-bootstrap\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport ArtistSearchResult from \"./ArtistSearchResult\";\nimport Player from \"./Player\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  client_id: \"9065c82d679c48b09c2df99999c34034\"\n});\nexport default function Dashboard({\n  code\n}) {\n  _s();\n\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [albumResults, setAlbumResults] = useState([]);\n  console.log(searchResults);\n  console.log(albumResults); // const [playingTrack, setPlayingTrack] = useState([]);\n  //console.log(searchResults);\n  // function chooseTrack(track) {\n  //   setPlayingTrack(track);\n  //   setSearch(\"\");\n  // }\n\n  function getAlbums(artistUri) {\n    setSearch(\"\");\n    spotifyApi.getArtistAlbums(artistUri).then(res => {\n      setAlbumResults(res.body.items.map(album => {\n        console.log(album);\n        var albumImage = \"\";\n\n        try {\n          albumImage = album.images[0].url;\n        } catch (err) {\n          console.log(\"No image\");\n        }\n\n        return {\n          name: album.name,\n          // title: track.name,\n          id: album.id,\n          albumUrl: albumImage\n        };\n      }));\n    });\n  }\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return; //Change this to Artists\n\n    let cancel = false;\n\n    (async () => {\n      let res = await spotifyApi.searchArtists(search); //console.log(res.body);\n\n      setSearchResults(res.body.artists.items.map(artist => {\n        console.log(artist); // if (typeof artist.image != \"undefined\") {\n        //   var artistImage = artist.images[0].url;\n        //   console.log(artistImage);\n        // }\n\n        var artistImage = \"\";\n\n        try {\n          artistImage = artist.images[0].url;\n        } catch (err) {\n          console.log(\"No image\");\n        } //console.log(artist);\n\n\n        return {\n          name: artist.name,\n          // title: track.name,\n          id: artist.id,\n          artistUrl: artistImage\n        };\n      }));\n    })(); //return () => (cancel = true);\n\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"d-flex flex-column py-2\",\n    style: {\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n      type: \"search\",\n      placeholder: \"Search Artists\",\n      value: search,\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow-1 my-2\",\n      style: {\n        overflowY: \"auto\"\n      },\n      children: [searchResults.map(artist => /*#__PURE__*/_jsxDEV(ArtistSearchResult, {\n        artist: artist,\n        getAlbums: getAlbums\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)), AlbumResults.map(album => /*#__PURE__*/_jsxDEV(AlbumQuery, {\n        album: album\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"27AwV8k7Q8gxOITxC4da+o4MXQc=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/Najan/Desktop/TopTracks/toptracks/src/components/Dashboard.js"],"names":["React","useAuth","useState","useEffect","Container","Form","SpotifyWebApi","TrackSearchResult","ArtistSearchResult","Player","spotifyApi","client_id","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","albumResults","setAlbumResults","console","log","getAlbums","artistUri","getArtistAlbums","then","res","body","items","map","album","albumImage","images","url","err","name","id","albumUrl","setAccessToken","cancel","searchArtists","artists","artist","artistImage","artistUrl","height","e","target","value","overflowY","AlbumResults"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport useAuth from \"./useAuth\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport TrackSearchResult from \"./TrackSearchResult\";\r\nimport ArtistSearchResult from \"./ArtistSearchResult\";\r\nimport Player from \"./Player\";\r\nconst spotifyApi = new SpotifyWebApi({\r\n  client_id: \"9065c82d679c48b09c2df99999c34034\",\r\n});\r\nexport default function Dashboard({ code }) {\r\n  const accessToken = useAuth(code);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [albumResults, setAlbumResults] = useState([]);\r\n  console.log(searchResults);\r\n  console.log(albumResults);\r\n  // const [playingTrack, setPlayingTrack] = useState([]);\r\n  //console.log(searchResults);\r\n\r\n  // function chooseTrack(track) {\r\n  //   setPlayingTrack(track);\r\n  //   setSearch(\"\");\r\n  // }\r\n\r\n  function getAlbums(artistUri) {\r\n    setSearch(\"\");\r\n    spotifyApi.getArtistAlbums(artistUri).then((res) => {\r\n      setAlbumResults(\r\n        res.body.items.map((album) => {\r\n          console.log(album);\r\n          var albumImage = \"\";\r\n          try {\r\n            albumImage = album.images[0].url;\r\n          } catch (err) {\r\n            console.log(\"No image\");\r\n          }\r\n          return {\r\n            name: album.name,\r\n            // title: track.name,\r\n            id: album.id,\r\n            albumUrl: albumImage,\r\n          };\r\n        })\r\n      );\r\n    });\r\n  }\r\n  useEffect(() => {\r\n    if (!accessToken) return;\r\n    spotifyApi.setAccessToken(accessToken);\r\n  }, [accessToken]);\r\n\r\n  useEffect(() => {\r\n    if (!search) return setSearchResults([]);\r\n    if (!accessToken) return;\r\n\r\n    //Change this to Artists\r\n    let cancel = false;\r\n    (async () => {\r\n      let res = await spotifyApi.searchArtists(search);\r\n      //console.log(res.body);\r\n      setSearchResults(\r\n        res.body.artists.items.map((artist) => {\r\n          console.log(artist);\r\n          // if (typeof artist.image != \"undefined\") {\r\n          //   var artistImage = artist.images[0].url;\r\n          //   console.log(artistImage);\r\n          // }\r\n          var artistImage = \"\";\r\n          try {\r\n            artistImage = artist.images[0].url;\r\n          } catch (err) {\r\n            console.log(\"No image\");\r\n          }\r\n          //console.log(artist);\r\n          return {\r\n            name: artist.name,\r\n            // title: track.name,\r\n            id: artist.id,\r\n            artistUrl: artistImage,\r\n          };\r\n        })\r\n      );\r\n    })();\r\n    //return () => (cancel = true);\r\n  }, [search, accessToken]);\r\n  return (\r\n    <Container className=\"d-flex flex-column py-2\" style={{ height: \"100vh\" }}>\r\n      <Form.Control\r\n        type=\"search\"\r\n        placeholder=\"Search Artists\"\r\n        value={search}\r\n        onChange={(e) => setSearch(e.target.value)}\r\n      ></Form.Control>\r\n      <div className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\r\n        {searchResults.map((artist) => (\r\n          <ArtistSearchResult artist={artist} getAlbums={getAlbums} />\r\n        ))}\r\n        {AlbumResults.map((album) => (\r\n          <AlbumQuery album={album} />\r\n        ))}\r\n      </div>\r\n      <div>\r\n        {/* <Player accessToken={accessToken} trackUri={playingTrack?.uri}></Player> */}\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}