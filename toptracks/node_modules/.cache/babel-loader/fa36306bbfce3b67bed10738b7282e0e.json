{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Najan\\\\Desktop\\\\TopTracks\\\\toptracks\\\\src\\\\components\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport useAuth from \"./useAuth\";\nimport { useState, useEffect } from \"react\";\nimport { Container, Form } from \"react-bootstrap\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport Player from \"./Player\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  client_id: \"9065c82d679c48b09c2df99999c34034\"\n});\nexport default function Dashboard({\n  code\n}) {\n  _s();\n\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [playingTrack, setPlayingTrack] = useState([]);\n  console.log(searchResults);\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearch(\"\");\n  }\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return; //Change this to Artists\n\n    let cancel = false;\n    console.log(\"Ping\");\n    spotifyApi.searchArtists(search).then(res => {\n      //if (cancel) return;\n      console.log(res.body);\n      setSearchResults(res.body.artists.items.map(artist => {\n        //console.log(artist);\n        var artistImage = artist.images[0].url;\n        console.log(artistImage);\n        return {\n          artist: artist.name // title: track.name,\n          // uri: track.uri,\n          //albumUrl: artistImage.url,\n\n        };\n      }));\n    });\n    console.log(\"Pong\"); //return () => (cancel = true);\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"d-flex flex-column py-2\",\n    style: {\n      height: \"100vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Form.Control, {\n      type: \"search\",\n      placeholder: \"Search Songs/Artists\",\n      value: search,\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"xazrpJmbJKKPLzo8qkt0Rb6MF8E=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/Najan/Desktop/TopTracks/toptracks/src/components/Dashboard.js"],"names":["React","useAuth","useState","useEffect","Container","Form","SpotifyWebApi","TrackSearchResult","Player","spotifyApi","client_id","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","playingTrack","setPlayingTrack","console","log","chooseTrack","track","setAccessToken","cancel","searchArtists","then","res","body","artists","items","map","artist","artistImage","images","url","name","height","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,iBAAhC;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AACA,MAAMC,UAAU,GAAG,IAAIH,aAAJ,CAAkB;AACnCI,EAAAA,SAAS,EAAE;AADwB,CAAlB,CAAnB;AAGA,eAAe,SAASC,SAAT,CAAmB;AAAEC,EAAAA;AAAF,CAAnB,EAA6B;AAAA;;AAC1C,QAAMC,WAAW,GAAGZ,OAAO,CAACW,IAAD,CAA3B;AACA,QAAM,CAACE,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACgB,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAC,EAAD,CAAhD;AACAkB,EAAAA,OAAO,CAACC,GAAR,CAAYL,aAAZ;;AAEA,WAASM,WAAT,CAAqBC,KAArB,EAA4B;AAC1BJ,IAAAA,eAAe,CAACI,KAAD,CAAf;AACAR,IAAAA,SAAS,CAAC,EAAD,CAAT;AACD;;AACDZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACU,WAAL,EAAkB;AAClBJ,IAAAA,UAAU,CAACe,cAAX,CAA0BX,WAA1B;AACD,GAHQ,EAGN,CAACA,WAAD,CAHM,CAAT;AAKAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACW,MAAL,EAAa,OAAOG,gBAAgB,CAAC,EAAD,CAAvB;AACb,QAAI,CAACJ,WAAL,EAAkB,OAFJ,CAId;;AACA,QAAIY,MAAM,GAAG,KAAb;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAZ,IAAAA,UAAU,CAACiB,aAAX,CAAyBZ,MAAzB,EAAiCa,IAAjC,CAAuCC,GAAD,IAAS;AAC7C;AAEAR,MAAAA,OAAO,CAACC,GAAR,CAAYO,GAAG,CAACC,IAAhB;AACAZ,MAAAA,gBAAgB,CACdW,GAAG,CAACC,IAAJ,CAASC,OAAT,CAAiBC,KAAjB,CAAuBC,GAAvB,CAA4BC,MAAD,IAAY;AACrC;AAEA,YAAIC,WAAW,GAAGD,MAAM,CAACE,MAAP,CAAc,CAAd,EAAiBC,GAAnC;AACAhB,QAAAA,OAAO,CAACC,GAAR,CAAYa,WAAZ;AACA,eAAO;AACLD,UAAAA,MAAM,EAAEA,MAAM,CAACI,IADV,CAEL;AACA;AACA;;AAJK,SAAP;AAMD,OAXD,CADc,CAAhB;AAcD,KAlBD;AAmBAjB,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EA1Bc,CA2Bd;AACD,GA5BQ,EA4BN,CAACP,MAAD,EAASD,WAAT,CA5BM,CAAT;AA6BA,sBACE,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,yBAArB;AAA+C,IAAA,KAAK,EAAE;AAAEyB,MAAAA,MAAM,EAAE;AAAV,KAAtD;AAAA,2BACE,QAAC,IAAD,CAAM,OAAN;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,WAAW,EAAC,sBAFd;AAGE,MAAA,KAAK,EAAExB,MAHT;AAIE,MAAA,QAAQ,EAAGyB,CAAD,IAAOxB,SAAS,CAACwB,CAAC,CAACC,MAAF,CAASC,KAAV;AAJ5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;GAnEuB9B,S;UACFV,O;;;KADEU,S","sourcesContent":["import React from \"react\";\r\nimport useAuth from \"./useAuth\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport TrackSearchResult from \"./TrackSearchResult\";\r\nimport Player from \"./Player\";\r\nconst spotifyApi = new SpotifyWebApi({\r\n  client_id: \"9065c82d679c48b09c2df99999c34034\",\r\n});\r\nexport default function Dashboard({ code }) {\r\n  const accessToken = useAuth(code);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [playingTrack, setPlayingTrack] = useState([]);\r\n  console.log(searchResults);\r\n\r\n  function chooseTrack(track) {\r\n    setPlayingTrack(track);\r\n    setSearch(\"\");\r\n  }\r\n  useEffect(() => {\r\n    if (!accessToken) return;\r\n    spotifyApi.setAccessToken(accessToken);\r\n  }, [accessToken]);\r\n\r\n  useEffect(() => {\r\n    if (!search) return setSearchResults([]);\r\n    if (!accessToken) return;\r\n\r\n    //Change this to Artists\r\n    let cancel = false;\r\n    console.log(\"Ping\");\r\n    spotifyApi.searchArtists(search).then((res) => {\r\n      //if (cancel) return;\r\n\r\n      console.log(res.body);\r\n      setSearchResults(\r\n        res.body.artists.items.map((artist) => {\r\n          //console.log(artist);\r\n\r\n          var artistImage = artist.images[0].url;\r\n          console.log(artistImage);\r\n          return {\r\n            artist: artist.name,\r\n            // title: track.name,\r\n            // uri: track.uri,\r\n            //albumUrl: artistImage.url,\r\n          };\r\n        })\r\n      );\r\n    });\r\n    console.log(\"Pong\");\r\n    //return () => (cancel = true);\r\n  }, [search, accessToken]);\r\n  return (\r\n    <Container className=\"d-flex flex-column py-2\" style={{ height: \"100vh\" }}>\r\n      <Form.Control\r\n        type=\"search\"\r\n        placeholder=\"Search Songs/Artists\"\r\n        value={search}\r\n        onChange={(e) => setSearch(e.target.value)}\r\n      ></Form.Control>\r\n      {/* <div className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\r\n        {searchResults.map((track) => (\r\n          <TrackSearchResult\r\n            track={track}\r\n            key={track.uri}\r\n            chooseTrack={chooseTrack}\r\n          />\r\n        ))}\r\n      </div> */}\r\n      {/* <div>\r\n        <Player accessToken={accessToken} trackUri={playingTrack?.uri}></Player>\r\n      </div> */}\r\n    </Container>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}