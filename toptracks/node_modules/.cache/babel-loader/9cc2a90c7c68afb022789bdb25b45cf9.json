{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Najan\\\\Desktop\\\\TopTracks\\\\SpTopify\\\\toptracks\\\\src\\\\components\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport useAuth from \"./useAuth\";\nimport { useState, useEffect } from \"react\";\nimport { Container, Form } from \"react-bootstrap\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport ArtistSearchResult from \"./ArtistSearchResult\";\nimport Player from \"./Player\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  client_id: \"9065c82d679c48b09c2df99999c34034\"\n});\nexport default function Dashboard({\n  code\n}) {\n  _s();\n\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [albumResults, setAlbumResults] = useState([]);\n  const [trackResults, setTrackResults] = useState([]); // console.log(searchResults);\n  // console.log(albumResults);\n\n  const [playingTrack, setPlayingTrack] = useState([]); //console.log(searchResults);\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearch(\"\");\n  }\n\n  function getArtistTracks(artistName) {\n    setSearch(\"\");\n    spotifyApi.searchTracks(\"artist:\" + artistName, {\n      limit: 50\n    }).then(res => {\n      setTrackResults(res.body.tracks.items.map(track => {\n        var trackImage = \"\"; //console.log(track);\n\n        try {\n          trackImage = track.album.images[2].url;\n        } catch (err) {\n          console.log(err.message);\n        }\n\n        return {\n          name: track.name,\n          uri: track.uri,\n          art: trackImage\n        };\n      }));\n    });\n  }\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    setTrackResults([]);\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n\n    (async () => {\n      let res = await spotifyApi.searchArtists(search); //console.log(res.body);\n\n      setSearchResults(res.body.artists.items.map(artist => {\n        //console.log(artist);\n        // if (typeof artist.image != \"undefined\") {\n        //   var artistImage = artist.images[0].url;\n        //   console.log(artistImage);\n        // }\n        var artistImage = \"\";\n\n        try {\n          artistImage = artist.images[0].url;\n        } catch (err) {\n          console.log(\"No image\");\n        } //console.log(artist);\n\n\n        return {\n          name: artist.name,\n          // title: track.name,\n          id: artist.id,\n          artistUrl: artistImage\n        };\n      }));\n    })(); //return () => (cancel = true);\n\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"d-flex flex-column py-2\",\n    style: {\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n      type: \"search\",\n      placeholder: \"Search Artists\",\n      value: search,\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow-1 my-2\",\n      style: {\n        overflowY: \"auto\"\n      },\n      children: [searchResults.map(artist => /*#__PURE__*/_jsxDEV(ArtistSearchResult, {\n        artist: artist,\n        getArtistTracks: getArtistTracks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)), trackResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n        track: track,\n        chooseTrack: chooseTrack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Player, {\n        accessToken: accessToken,\n        trackUri: playingTrack === null || playingTrack === void 0 ? void 0 : playingTrack.uri\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"fOyS+Amxmw1H0CdDT3cUy4AG/Tg=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/Najan/Desktop/TopTracks/SpTopify/toptracks/src/components/Dashboard.js"],"names":["React","useAuth","useState","useEffect","Container","Form","SpotifyWebApi","TrackSearchResult","ArtistSearchResult","Player","spotifyApi","client_id","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","albumResults","setAlbumResults","trackResults","setTrackResults","playingTrack","setPlayingTrack","chooseTrack","track","getArtistTracks","artistName","searchTracks","limit","then","res","body","tracks","items","map","trackImage","album","images","url","err","console","log","message","name","uri","art","setAccessToken","cancel","searchArtists","artists","artist","artistImage","id","artistUrl","height","e","target","value","overflowY"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport useAuth from \"./useAuth\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport TrackSearchResult from \"./TrackSearchResult\";\r\nimport ArtistSearchResult from \"./ArtistSearchResult\";\r\nimport Player from \"./Player\";\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n  client_id: \"9065c82d679c48b09c2df99999c34034\",\r\n});\r\nexport default function Dashboard({ code }) {\r\n  const accessToken = useAuth(code);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [albumResults, setAlbumResults] = useState([]);\r\n  const [trackResults, setTrackResults] = useState([]);\r\n  // console.log(searchResults);\r\n  // console.log(albumResults);\r\n  const [playingTrack, setPlayingTrack] = useState([]);\r\n  //console.log(searchResults);\r\n\r\n  function chooseTrack(track) {\r\n    setPlayingTrack(track);\r\n    setSearch(\"\");\r\n  }\r\n\r\n  function getArtistTracks(artistName) {\r\n    setSearch(\"\");\r\n    spotifyApi\r\n      .searchTracks(\"artist:\" + artistName, { limit: 50 })\r\n      .then((res) => {\r\n        setTrackResults(\r\n          res.body.tracks.items.map((track) => {\r\n            var trackImage = \"\";\r\n            //console.log(track);\r\n            try {\r\n              trackImage = track.album.images[2].url;\r\n            } catch (err) {\r\n              console.log(err.message);\r\n            }\r\n            return {\r\n              name: track.name,\r\n              uri: track.uri,\r\n              art: trackImage,\r\n            };\r\n          })\r\n        );\r\n      });\r\n  }\r\n  useEffect(() => {\r\n    if (!accessToken) return;\r\n    spotifyApi.setAccessToken(accessToken);\r\n  }, [accessToken]);\r\n\r\n  useEffect(() => {\r\n    setTrackResults([]);\r\n    if (!search) return setSearchResults([]);\r\n    if (!accessToken) return;\r\n\r\n    let cancel = false;\r\n    (async () => {\r\n      let res = await spotifyApi.searchArtists(search);\r\n      //console.log(res.body);\r\n      setSearchResults(\r\n        res.body.artists.items.map((artist) => {\r\n          //console.log(artist);\r\n          // if (typeof artist.image != \"undefined\") {\r\n          //   var artistImage = artist.images[0].url;\r\n          //   console.log(artistImage);\r\n          // }\r\n          var artistImage = \"\";\r\n          try {\r\n            artistImage = artist.images[0].url;\r\n          } catch (err) {\r\n            console.log(\"No image\");\r\n          }\r\n          //console.log(artist);\r\n          return {\r\n            name: artist.name,\r\n            // title: track.name,\r\n            id: artist.id,\r\n            artistUrl: artistImage,\r\n          };\r\n        })\r\n      );\r\n    })();\r\n    //return () => (cancel = true);\r\n  }, [search, accessToken]);\r\n  return (\r\n    <Container className=\"d-flex flex-column py-2\" style={{ height: \"100vh\" }}>\r\n      <Form.Control\r\n        type=\"search\"\r\n        placeholder=\"Search Artists\"\r\n        value={search}\r\n        onChange={(e) => setSearch(e.target.value)}\r\n      ></Form.Control>\r\n      <div className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\r\n        {searchResults.map((artist) => (\r\n          <ArtistSearchResult\r\n            artist={artist}\r\n            getArtistTracks={getArtistTracks}\r\n          />\r\n        ))}\r\n        {trackResults.map((track) => (\r\n          <TrackSearchResult track={track} chooseTrack={chooseTrack} />\r\n        ))}\r\n      </div>\r\n      <div>\r\n        <Player accessToken={accessToken} trackUri={playingTrack?.uri}></Player>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}