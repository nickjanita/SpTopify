{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Najan\\\\Desktop\\\\TopTracks\\\\SpTopify\\\\toptracks\\\\src\\\\components\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport useAuth from \"./useAuth\";\nimport { useState, useEffect } from \"react\";\nimport { Container, Form } from \"react-bootstrap\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport ArtistSearchResult from \"./ArtistSearchResult\";\nimport Player from \"./Player\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  client_id: \"9065c82d679c48b09c2df99999c34034\"\n});\nexport default function Dashboard({\n  code\n}) {\n  _s();\n\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [albumResults, setAlbumResults] = useState([]);\n  const [trackResults, setTrackResults] = useState([]);\n  const [playlistResults, setPlaylistResults] = useState([]);\n  const [playingTrack, setPlayingTrack] = useState([]);\n  var playlists = [];\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearch(\"\");\n  }\n\n  function addToPlaylist(track, playlist) {\n    console.log(track.uri);\n    spotifyApi.addTracksToPlaylist(playlist.id.toString(), [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"]).then(function (data) {\n      console.log(\"Added tracks to playlist!\");\n    }, function (err) {\n      console.log(\"Something went wrong!\", err);\n    });\n  }\n\n  function getPlaylists() {\n    spotifyApi.getUserPlaylists().then(res => {\n      setPlaylistResults( // console.log(res.body.items[0].name)\n      res.body.items.map(playlist => {\n        //console.log(playlist);\n        var playlistImage = \"\";\n\n        try {\n          playlistImage = playlist.images[0].url;\n        } catch (err) {\n          console.log(err.message);\n        }\n\n        return {\n          name: playlist.name,\n          img: playlistImage,\n          id: playlist.id\n        };\n      }));\n    });\n  } //Handling artist top tracks\n\n\n  function getArtistTracks(artistName) {\n    setSearch(\"\");\n    getPlaylists();\n    spotifyApi.searchTracks(\"artist:\" + artistName, {\n      limit: 50\n    }).then(res => {\n      var songCount = 0;\n      setTrackResults(res.body.tracks.items.map(track => {\n        songCount = songCount + 1;\n        var trackImage = \"\";\n        console.log(track);\n\n        try {\n          trackImage = track.album.images[2].url;\n        } catch (err) {\n          console.log(err.message);\n        }\n\n        return {\n          name: track.name,\n          uri: track.uri,\n          art: trackImage,\n          albumName: track.album.name,\n          release: track.album.release_date,\n          explicit: track.explicit,\n          rank: songCount\n        };\n      }));\n    });\n  } //Set access token\n\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]); //Artist Search\n\n  useEffect(() => {\n    setTrackResults([]);\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n\n    (async () => {\n      let res = await spotifyApi.searchArtists(search); //console.log(res.body);\n\n      setSearchResults(res.body.artists.items.map(artist => {\n        //console.log(artist);\n        var artistImage = \"\";\n\n        try {\n          artistImage = artist.images[0].url;\n        } catch (err) {\n          console.log(\"No image\");\n        } //console.log(artist);\n\n\n        return {\n          name: artist.name,\n          id: artist.id,\n          artistUrl: artistImage\n        };\n      }));\n    })();\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", /*#__PURE__*/_jsxDEV(Container, {\n      className: \"d-flex flex-column py-2\",\n      style: {\n        height: \"100vh\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"search\",\n        placeholder: \"Search Artists\",\n        value: search,\n        onChange: e => setSearch(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-grow-1 my-2\",\n        style: {\n          overflowY: \"auto\"\n        },\n        children: [searchResults.map(artist => /*#__PURE__*/_jsxDEV(ArtistSearchResult, {\n          artist: artist,\n          getArtistTracks: getArtistTracks\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)), trackResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n          class: \"tracks\",\n          track: track,\n          chooseTrack: chooseTrack,\n          playlists: playlistResults,\n          addToPlaylist: addToPlaylist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Player, {\n          accessToken: accessToken,\n          trackUri: playingTrack === null || playingTrack === void 0 ? void 0 : playingTrack.uri\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"EsWUdBKeU0mDrZSVGD+iVow5OR8=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/Najan/Desktop/TopTracks/SpTopify/toptracks/src/components/Dashboard.js"],"names":["React","useAuth","useState","useEffect","Container","Form","SpotifyWebApi","TrackSearchResult","ArtistSearchResult","Player","spotifyApi","client_id","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","albumResults","setAlbumResults","trackResults","setTrackResults","playlistResults","setPlaylistResults","playingTrack","setPlayingTrack","playlists","chooseTrack","track","addToPlaylist","playlist","console","log","uri","addTracksToPlaylist","id","toString","then","data","err","getPlaylists","getUserPlaylists","res","body","items","map","playlistImage","images","url","message","name","img","getArtistTracks","artistName","searchTracks","limit","songCount","tracks","trackImage","album","art","albumName","release","release_date","explicit","rank","setAccessToken","cancel","searchArtists","artists","artist","artistImage","artistUrl","height","e","target","value","overflowY"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,iBAAhC;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,UAAU,GAAG,IAAIJ,aAAJ,CAAkB;AACnCK,EAAAA,SAAS,EAAE;AADwB,CAAlB,CAAnB;AAIA,eAAe,SAASC,SAAT,CAAmB;AAAEC,EAAAA;AAAF,CAAnB,EAA6B;AAAA;;AAC1C,QAAMC,WAAW,GAAGb,OAAO,CAACY,IAAD,CAA3B;AACA,QAAM,CAACE,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACe,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACiB,YAAD,EAAeC,eAAf,IAAkClB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACmB,YAAD,EAAeC,eAAf,IAAkCpB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACqB,eAAD,EAAkBC,kBAAlB,IAAwCtB,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACuB,YAAD,EAAeC,eAAf,IAAkCxB,QAAQ,CAAC,EAAD,CAAhD;AACA,MAAIyB,SAAS,GAAG,EAAhB;;AAEA,WAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1BH,IAAAA,eAAe,CAACG,KAAD,CAAf;AACAb,IAAAA,SAAS,CAAC,EAAD,CAAT;AACD;;AACD,WAASc,aAAT,CAAuBD,KAAvB,EAA8BE,QAA9B,EAAwC;AACtCC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,GAAlB;AACAxB,IAAAA,UAAU,CACPyB,mBADH,CACuBJ,QAAQ,CAACK,EAAT,CAAYC,QAAZ,EADvB,EAC+C,CAC3C,sCAD2C,EAE3C,sCAF2C,CAD/C,EAKGC,IALH,CAMI,UAAUC,IAAV,EAAgB;AACdP,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACD,KARL,EASI,UAAUO,GAAV,EAAe;AACbR,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCO,GAArC;AACD,KAXL;AAaD;;AACD,WAASC,YAAT,GAAwB;AACtB/B,IAAAA,UAAU,CAACgC,gBAAX,GAA8BJ,IAA9B,CAAoCK,GAAD,IAAS;AAC1CnB,MAAAA,kBAAkB,EAChB;AACAmB,MAAAA,GAAG,CAACC,IAAJ,CAASC,KAAT,CAAeC,GAAf,CAAoBf,QAAD,IAAc;AAC/B;AACA,YAAIgB,aAAa,GAAG,EAApB;;AACA,YAAI;AACFA,UAAAA,aAAa,GAAGhB,QAAQ,CAACiB,MAAT,CAAgB,CAAhB,EAAmBC,GAAnC;AACD,SAFD,CAEE,OAAOT,GAAP,EAAY;AACZR,UAAAA,OAAO,CAACC,GAAR,CAAYO,GAAG,CAACU,OAAhB;AACD;;AACD,eAAO;AACLC,UAAAA,IAAI,EAAEpB,QAAQ,CAACoB,IADV;AAELC,UAAAA,GAAG,EAAEL,aAFA;AAGLX,UAAAA,EAAE,EAAEL,QAAQ,CAACK;AAHR,SAAP;AAKD,OAbD,CAFgB,CAAlB;AAiBD,KAlBD;AAmBD,GAlDyC,CAmD1C;;;AACA,WAASiB,eAAT,CAAyBC,UAAzB,EAAqC;AACnCtC,IAAAA,SAAS,CAAC,EAAD,CAAT;AACAyB,IAAAA,YAAY;AACZ/B,IAAAA,UAAU,CACP6C,YADH,CACgB,YAAYD,UAD5B,EACwC;AAAEE,MAAAA,KAAK,EAAE;AAAT,KADxC,EAEGlB,IAFH,CAESK,GAAD,IAAS;AACb,UAAIc,SAAS,GAAG,CAAhB;AACAnC,MAAAA,eAAe,CACbqB,GAAG,CAACC,IAAJ,CAASc,MAAT,CAAgBb,KAAhB,CAAsBC,GAAtB,CAA2BjB,KAAD,IAAW;AACnC4B,QAAAA,SAAS,GAAGA,SAAS,GAAG,CAAxB;AACA,YAAIE,UAAU,GAAG,EAAjB;AACA3B,QAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;;AACA,YAAI;AACF8B,UAAAA,UAAU,GAAG9B,KAAK,CAAC+B,KAAN,CAAYZ,MAAZ,CAAmB,CAAnB,EAAsBC,GAAnC;AACD,SAFD,CAEE,OAAOT,GAAP,EAAY;AACZR,UAAAA,OAAO,CAACC,GAAR,CAAYO,GAAG,CAACU,OAAhB;AACD;;AACD,eAAO;AACLC,UAAAA,IAAI,EAAEtB,KAAK,CAACsB,IADP;AAELjB,UAAAA,GAAG,EAAEL,KAAK,CAACK,GAFN;AAGL2B,UAAAA,GAAG,EAAEF,UAHA;AAILG,UAAAA,SAAS,EAAEjC,KAAK,CAAC+B,KAAN,CAAYT,IAJlB;AAKLY,UAAAA,OAAO,EAAElC,KAAK,CAAC+B,KAAN,CAAYI,YALhB;AAMLC,UAAAA,QAAQ,EAAEpC,KAAK,CAACoC,QANX;AAOLC,UAAAA,IAAI,EAAET;AAPD,SAAP;AASD,OAlBD,CADa,CAAf;AAqBD,KAzBH;AA0BD,GAjFyC,CAmF1C;;;AACAtD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACW,WAAL,EAAkB;AAClBJ,IAAAA,UAAU,CAACyD,cAAX,CAA0BrD,WAA1B;AACD,GAHQ,EAGN,CAACA,WAAD,CAHM,CAAT,CApF0C,CAyF1C;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,eAAe,CAAC,EAAD,CAAf;AACA,QAAI,CAACP,MAAL,EAAa,OAAOG,gBAAgB,CAAC,EAAD,CAAvB;AACb,QAAI,CAACJ,WAAL,EAAkB;AAElB,QAAIsD,MAAM,GAAG,KAAb;;AACA,KAAC,YAAY;AACX,UAAIzB,GAAG,GAAG,MAAMjC,UAAU,CAAC2D,aAAX,CAAyBtD,MAAzB,CAAhB,CADW,CAEX;;AACAG,MAAAA,gBAAgB,CACdyB,GAAG,CAACC,IAAJ,CAAS0B,OAAT,CAAiBzB,KAAjB,CAAuBC,GAAvB,CAA4ByB,MAAD,IAAY;AACrC;AAEA,YAAIC,WAAW,GAAG,EAAlB;;AACA,YAAI;AACFA,UAAAA,WAAW,GAAGD,MAAM,CAACvB,MAAP,CAAc,CAAd,EAAiBC,GAA/B;AACD,SAFD,CAEE,OAAOT,GAAP,EAAY;AACZR,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD,SARoC,CASrC;;;AACA,eAAO;AACLkB,UAAAA,IAAI,EAAEoB,MAAM,CAACpB,IADR;AAELf,UAAAA,EAAE,EAAEmC,MAAM,CAACnC,EAFN;AAGLqC,UAAAA,SAAS,EAAED;AAHN,SAAP;AAKD,OAfD,CADc,CAAhB;AAkBD,KArBD;AAsBD,GA5BQ,EA4BN,CAACzD,MAAD,EAASD,WAAT,CA5BM,CAAT;AA6BA,sBACE;AAAA,eACG,GADH,eAEE,QAAC,SAAD;AACE,MAAA,SAAS,EAAC,yBADZ;AAEE,MAAA,KAAK,EAAE;AAAE4D,QAAAA,MAAM,EAAE;AAAV,OAFT;AAAA,8BAIE,QAAC,IAAD,CAAM,OAAN;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,WAAW,EAAC,gBAFd;AAGE,QAAA,KAAK,EAAE3D,MAHT;AAIE,QAAA,QAAQ,EAAG4D,CAAD,IAAO3D,SAAS,CAAC2D,CAAC,CAACC,MAAF,CAASC,KAAV;AAJ5B;AAAA;AAAA;AAAA;AAAA,cAJF,eAUE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAkC,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAzC;AAAA,mBACG7D,aAAa,CAAC6B,GAAd,CAAmByB,MAAD,iBACjB,QAAC,kBAAD;AACE,UAAA,MAAM,EAAEA,MADV;AAEE,UAAA,eAAe,EAAElB;AAFnB;AAAA;AAAA;AAAA;AAAA,gBADD,CADH,EAOGhC,YAAY,CAACyB,GAAb,CAAkBjB,KAAD,iBAChB,QAAC,iBAAD;AACE,UAAA,KAAK,EAAC,QADR;AAEE,UAAA,KAAK,EAAEA,KAFT;AAGE,UAAA,WAAW,EAAED,WAHf;AAIE,UAAA,SAAS,EAAEL,eAJb;AAKE,UAAA,aAAa,EAAEO;AALjB;AAAA;AAAA;AAAA;AAAA,gBADD,CAPH;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,eA2BE;AAAA,+BACE,QAAC,MAAD;AACE,UAAA,WAAW,EAAEhB,WADf;AAEE,UAAA,QAAQ,EAAEW,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAES;AAF1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA3BF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuCD;;GA9JuBtB,S;UACFX,O;;;KADEW,S","sourcesContent":["import React from \"react\";\r\nimport useAuth from \"./useAuth\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport TrackSearchResult from \"./TrackSearchResult\";\r\nimport ArtistSearchResult from \"./ArtistSearchResult\";\r\nimport Player from \"./Player\";\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n  client_id: \"9065c82d679c48b09c2df99999c34034\",\r\n});\r\n\r\nexport default function Dashboard({ code }) {\r\n  const accessToken = useAuth(code);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [albumResults, setAlbumResults] = useState([]);\r\n  const [trackResults, setTrackResults] = useState([]);\r\n  const [playlistResults, setPlaylistResults] = useState([]);\r\n  const [playingTrack, setPlayingTrack] = useState([]);\r\n  var playlists = [];\r\n\r\n  function chooseTrack(track) {\r\n    setPlayingTrack(track);\r\n    setSearch(\"\");\r\n  }\r\n  function addToPlaylist(track, playlist) {\r\n    console.log(track.uri);\r\n    spotifyApi\r\n      .addTracksToPlaylist(playlist.id.toString(), [\r\n        \"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\",\r\n        \"spotify:track:1301WleyT98MSxVHPZCA6M\",\r\n      ])\r\n      .then(\r\n        function (data) {\r\n          console.log(\"Added tracks to playlist!\");\r\n        },\r\n        function (err) {\r\n          console.log(\"Something went wrong!\", err);\r\n        }\r\n      );\r\n  }\r\n  function getPlaylists() {\r\n    spotifyApi.getUserPlaylists().then((res) => {\r\n      setPlaylistResults(\r\n        // console.log(res.body.items[0].name)\r\n        res.body.items.map((playlist) => {\r\n          //console.log(playlist);\r\n          var playlistImage = \"\";\r\n          try {\r\n            playlistImage = playlist.images[0].url;\r\n          } catch (err) {\r\n            console.log(err.message);\r\n          }\r\n          return {\r\n            name: playlist.name,\r\n            img: playlistImage,\r\n            id: playlist.id,\r\n          };\r\n        })\r\n      );\r\n    });\r\n  }\r\n  //Handling artist top tracks\r\n  function getArtistTracks(artistName) {\r\n    setSearch(\"\");\r\n    getPlaylists();\r\n    spotifyApi\r\n      .searchTracks(\"artist:\" + artistName, { limit: 50 })\r\n      .then((res) => {\r\n        var songCount = 0;\r\n        setTrackResults(\r\n          res.body.tracks.items.map((track) => {\r\n            songCount = songCount + 1;\r\n            var trackImage = \"\";\r\n            console.log(track);\r\n            try {\r\n              trackImage = track.album.images[2].url;\r\n            } catch (err) {\r\n              console.log(err.message);\r\n            }\r\n            return {\r\n              name: track.name,\r\n              uri: track.uri,\r\n              art: trackImage,\r\n              albumName: track.album.name,\r\n              release: track.album.release_date,\r\n              explicit: track.explicit,\r\n              rank: songCount,\r\n            };\r\n          })\r\n        );\r\n      });\r\n  }\r\n\r\n  //Set access token\r\n  useEffect(() => {\r\n    if (!accessToken) return;\r\n    spotifyApi.setAccessToken(accessToken);\r\n  }, [accessToken]);\r\n\r\n  //Artist Search\r\n  useEffect(() => {\r\n    setTrackResults([]);\r\n    if (!search) return setSearchResults([]);\r\n    if (!accessToken) return;\r\n\r\n    let cancel = false;\r\n    (async () => {\r\n      let res = await spotifyApi.searchArtists(search);\r\n      //console.log(res.body);\r\n      setSearchResults(\r\n        res.body.artists.items.map((artist) => {\r\n          //console.log(artist);\r\n\r\n          var artistImage = \"\";\r\n          try {\r\n            artistImage = artist.images[0].url;\r\n          } catch (err) {\r\n            console.log(\"No image\");\r\n          }\r\n          //console.log(artist);\r\n          return {\r\n            name: artist.name,\r\n            id: artist.id,\r\n            artistUrl: artistImage,\r\n          };\r\n        })\r\n      );\r\n    })();\r\n  }, [search, accessToken]);\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      <Container\r\n        className=\"d-flex flex-column py-2\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <Form.Control\r\n          type=\"search\"\r\n          placeholder=\"Search Artists\"\r\n          value={search}\r\n          onChange={(e) => setSearch(e.target.value)}\r\n        ></Form.Control>\r\n        <div className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\r\n          {searchResults.map((artist) => (\r\n            <ArtistSearchResult\r\n              artist={artist}\r\n              getArtistTracks={getArtistTracks}\r\n            />\r\n          ))}\r\n          {trackResults.map((track) => (\r\n            <TrackSearchResult\r\n              class=\"tracks\"\r\n              track={track}\r\n              chooseTrack={chooseTrack}\r\n              playlists={playlistResults}\r\n              addToPlaylist={addToPlaylist}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div>\r\n          <Player\r\n            accessToken={accessToken}\r\n            trackUri={playingTrack?.uri}\r\n          ></Player>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}